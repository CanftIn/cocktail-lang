// Supported x-macros are:
// - COCKTAIL_SEMANTICS_BUILTIN_KIND_NAME(Name)
//   Used as a fallback if other macros are missing. Used directly by Invalid
//   only, which is defined last.
//   - COCKTAIL_SEMANTICS_BUILTIN_KIND(Name, Label)
//     Defines a non-Invalid builtin type. The label is used for stringifying
//     types.
//
// This tree represents the subset relationship between these macros, where if a
// specific x-macro isn't defined, it'll fall back to the parent macro.

#if !(defined(COCKTAIL_SEMANTICS_BUILTIN_KIND_NAME) || \
      defined(COCKTAIL_SEMANTICS_BUILTIN_KIND))
#error \
    "Must define COCKTAIL_SEMANTICS_BUILTIN_KIND family x-macros to use this file."
#endif

// If COCKTAIL_SEMANTICS_BUILTIN_KIND_NAME is undefined, ignore calls.
#ifndef COCKTAIL_SEMANTICS_BUILTIN_KIND_NAME
#define COCKTAIL_SEMANTICS_BUILTIN_KIND_NAME(Name)
#endif

// If COCKTAIL_SEMANTICS_BUILTIN_KIND is undefined, delegate calls to
// COCKTAIL_SEMANTICS_BUILTIN_KIND_NAME.
#ifndef COCKTAIL_SEMANTICS_BUILTIN_KIND
#define COCKTAIL_SEMANTICS_BUILTIN_KIND(Name, ...) \
  COCKTAIL_SEMANTICS_BUILTIN_KIND_NAME(Name)
#endif

// Tracks expressions which are valid as types.
// This has a deliberately self-referential type.
COCKTAIL_SEMANTICS_BUILTIN_KIND(TypeType, "type")

// Used when a semantic error has been detected, and a SemanticNodeId is still
// required. For example, when there is a type checking issue, this will be used
// in the type_id. It's typically used as a cue that semantic checking doesn't
// need to issue further diagnostics.
COCKTAIL_SEMANTICS_BUILTIN_KIND(Error, "<error>")

// -----------------------------------------------------------------------------
// TODO: Below types are all placeholders. While the above may last, the below
// are expected to need to change in order to better reflect Carbon's design.
// Keeping distinct placeholders can help find usages for later fixes.
// -----------------------------------------------------------------------------

// The type of bool literals and branch conditions, bool.
COCKTAIL_SEMANTICS_BUILTIN_KIND(BoolType, "bool")

// The type of integer values and integer literals, currently always i32.
COCKTAIL_SEMANTICS_BUILTIN_KIND(IntegerType, "i32")

// The type of floating point values and real literals, currently always f64.
COCKTAIL_SEMANTICS_BUILTIN_KIND(FloatingPointType, "f64")

// The type of string values and String literals.
COCKTAIL_SEMANTICS_BUILTIN_KIND(StringType, "String")

// Keep invalid last, so that we can use values as array indices without needing
// an invalid entry.
COCKTAIL_SEMANTICS_BUILTIN_KIND_NAME(Invalid)

#undef COCKTAIL_SEMANTICS_BUILTIN_KIND_NAME
#undef COCKTAIL_SEMANTICS_BUILTIN_KIND